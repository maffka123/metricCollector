// Package config holds configuration spezific for server.
package config

import (
	"flag"
	"math/big"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGetConfig(t *testing.T) {
	type settings struct {
		Endpoint        string
		pathToCryptoKey string
	}
	type want struct {
		Endpoint  string
		CryptoKey string
	}
	tests := []struct {
		name     string
		settings settings
		want     want
	}{
		{name: "parse key", settings: settings{Endpoint: "localhost:8080", pathToCryptoKey: "testdata/key"},
			want: want{Endpoint: "localhost:8080", CryptoKey: "28637098524913619841211899769804910419622065665805698958570077756831993447191391967739730922204386606569095005143906213439063540036212245467169588808359666175005100763974226317825226699206827264092970361997800191064743694665844323475136678199830820723229715193408657745591389876823492100395681074739270814729848367661001078789423442694233766074704753182920808318237419410839679369316374692610133579936426130373054864637486362281736371400720454580657856622084992542463928541210499239498806517943665877835050533501877771076040825257262843669655832780254535650056045804331655374144683215915561864657294931519091564899104046967476606463038909314561696052340667136311239622458382777928251988574008657544573489884456080544760547274310974513520311449257809897198123743890766479261541541576155968988997275768420916847780828334558128112900407644909423336365487443240184684306188444384774409490748327275498760057910989157023995783489"}},
		{name: "parse empty key", settings: settings{Endpoint: "", pathToCryptoKey: ""},
			want: want{Endpoint: "", CryptoKey: ""}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var cfg Config
			w, _ := new(big.Int).SetString(tt.want.CryptoKey, 10)
			os.Setenv("ADDRESS", tt.settings.Endpoint)
			os.Setenv("CRYPTO_KEY", tt.settings.pathToCryptoKey)
			GetConfig(&cfg)
			assert.Equal(t, cfg.Endpoint, tt.want.Endpoint)
			assert.Equal(t, cfg.CryptoKey.D, w)
		})
	}
}

func TestFlagForKeys(t *testing.T) {
	type settings struct {
		Endpoint        string
		pathToCryptoKey string
	}
	type want struct {
		Endpoint  string
		CryptoKey string
	}
	tests := []struct {
		name     string
		settings settings
		want     want
	}{
		{name: "parse key", settings: settings{Endpoint: "localhost:8080", pathToCryptoKey: "testdata/key"},
			want: want{Endpoint: "localhost:8080", CryptoKey: "28637098524913619841211899769804910419622065665805698958570077756831993447191391967739730922204386606569095005143906213439063540036212245467169588808359666175005100763974226317825226699206827264092970361997800191064743694665844323475136678199830820723229715193408657745591389876823492100395681074739270814729848367661001078789423442694233766074704753182920808318237419410839679369316374692610133579936426130373054864637486362281736371400720454580657856622084992542463928541210499239498806517943665877835050533501877771076040825257262843669655832780254535650056045804331655374144683215915561864657294931519091564899104046967476606463038909314561696052340667136311239622458382777928251988574008657544573489884456080544760547274310974513520311449257809897198123743890766479261541541576155968988997275768420916847780828334558128112900407644909423336365487443240184684306188444384774409490748327275498760057910989157023995783489"}},
		{name: "parse empty key", settings: settings{Endpoint: "", pathToCryptoKey: ""},
			want: want{Endpoint: "", CryptoKey: ""}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var cfg Config
			w, _ := new(big.Int).SetString(tt.want.CryptoKey, 10)
			os.Args = []string{"cmd", "-a", tt.settings.Endpoint, "-ck", tt.settings.pathToCryptoKey}
			flag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ExitOnError)
			flag.StringVar(&cfg.Endpoint, "a", "localhost:8080", "server address as host:port")
			flag.Var(&cfg.CryptoKey, "ck", "crypto key for asymmetric encoding")
			flag.Parse()
			assert.Equal(t, cfg.Endpoint, tt.want.Endpoint)
			assert.Equal(t, cfg.CryptoKey.D, w)
		})
	}
}
